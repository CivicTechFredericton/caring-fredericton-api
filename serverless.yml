service: caring-fred

provider:
  account_id: ${ssm:account-id}
  # The role referenced by cfnRole is created by CloudFormation in
  # advance as; account is used to execute deployments.
  # cfnRole: arn:aws:iam::${self:provider.account_id}:role/serverless_cloudformation

  # How much memory to grant to the Lambda function.  Allocated memory
  # drives compute capabilities.  The lowest value is 128 MB.  Unless
  # large amounts of memory are required, you should work with the
  # lowest value.  If you require more resources consider if you are
  # building your application correctly with efficient code.
  #
  # More information about memory/compute can be found here:
  # https://goo.gl/g8YjqY
  memorySize: 128
  name: aws
  stage: ${opt:stage}
  region: ${opt:region}
  runtime: python3.7
  deploymentBucket:
    name: ${self:service}-${self:provider.stage}-serverlessdeploymentbucket

  # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  timeout: 6
  # Allow for cf "AWS::" variables
  # See https://goo.gl/atHr7z
  variableSyntax: "\\${(?!AWS::)([ :a-zA-Z0-9._,\\-\\/\\(\\)]+?)}"

  # Add additional environment variables if necessary
  environment:
    SERVICE_NAME: ${self:service}
    STAGE: ${self:provider.stage}

  # Reference external API Gateway definition
  apiGateway:
    restApiId: ${cf:${self:service}-apig-${self:provider.stage}.ApiGateway}
    restApiRootResourceId: ${cf:${self:service}-apig-${self:provider.stage}.ApiGatewayRootResourceId}

  # IAM role permissions given to the Lambda function.  Update as
  # needed.  More information about IAM permissions can be found here:
  #
  # https://goo.gl/6jZuHu
  # https://goo.gl/EWuaSm
  # https://goo.gl/ki8hXT
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource:
        - Fn::Join:
            - ':'
            - - 'arn:aws:logs'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'log-group:/aws/lambda/*:*:*'
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
      Resource:
        Fn::GetAtt: [CognitoUserPoolUsers, Arn]
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource:
        - Fn::Join:
            - ':'
            - - 'arn:aws:ses'
              - 'us-east-1' # Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'identity/*'
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:*:*:table/${self:service}-${self:provider.stage}*

plugins:
  - serverless-wsgi

custom:
  env: ${file(configs/${self:provider.stage}.yaml)}
  default_domain_name: ${ssm:default-domain-name}
  default_ui_domain_name: https://${self:provider.stage}-www.${self:custom.default_domain_name}
  web_domain_name: ${self:custom.env.ui_domain_name, self:custom.default_ui_domain_name}
  default_deletion_policy: Delete
  wsgi:
    app: api.app

package:
  exclude:
    - ./**
  include:
    - api.py
    - apidocs/**
    - configs/${self:provider.stage}.yaml
    - core/**
    - handlers/**
    - services/**

functions:
  login:
    name: ${self:service}-${self:provider.stage}-api-login
    handler: handlers/login.handler
    environment:
      COGNITO_USER_POOL_USERS_ID:
        Ref: CognitoUserPoolUsers
      COGNITO_USER_POOL_CLIENT_USERS_ID:
        Ref: CognitoUserPoolClientUsers
    events:
      - http:
          method: POST
          path: /api/login
          cors: true

  swagger:
    name: ${self:service}-${self:provider.stage}-swagger
    handler: handlers/swagger.handler
    events:
      - http:
          method: GET
          path: /index.html
      - http:
          method: GET
          path: /swagger.yaml

  api:
    name: ${self:service}-${self:provider.stage}-api
    handler: wsgi_handler.handler
    environment:
      UI_DOMAIN_NAME: ${self:custom.web_domain_name}
    events:
      - http:
          method: POST
          path: /users/signup
          cors: true
      - http:
          method: any
          path: /guests/{proxy+}
          cors: true
      - http:
          method: any
          path: /{proxy+}
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoAuthorizer

resources:
  Resources:
    #===================================================================
    # Cognito
    #===================================================================
    CognitoUserPoolUsers:
      Type: AWS::Cognito::UserPool
      DeletionPolicy: ${self:custom.env.deletion_policy, self:custom.default_deletion_policy}
      Properties:
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: False
          InviteMessageTemplate:
            EmailSubject: Your temporary password
            EmailMessage: |
              Your username is {username} and temporary password is {####}.
              Please go to ${self:custom.web_domain_name}/login to update your password.
        AutoVerifiedAttributes:
          - email
        EmailVerificationMessage: |
          Your verification code is {####}.
        EmailVerificationSubject: |
          Your verification code
        Policies:
          PasswordPolicy:
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: false
            MinimumLength: 8
        UsernameAttributes:
          - email
        UserPoolName: ${self:service}-${self:provider.stage}-users
        UserPoolTags:
            CLIENT: Civic Tech Fredericton
            PROJECT: Caring Calendar

    CognitoUserPoolClientUsers:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: users
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        RefreshTokenValidity: 30
        UserPoolId:
          Ref: CognitoUserPoolUsers

    CognitoAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        IdentitySource: method.request.header.Authorization
        Name: ${self:service}-${self:provider.stage}-users-authorizer
        RestApiId: ${self:provider.apiGateway.restApiId}
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPoolUsers, Arn]
