service: caring-fred

provider:
  account_id: ${self:custom.env.account_id}
  # The role referenced by cfnRole is created by CloudFormation in
  # advance as; account is used to execute deployments.
  cfnRole: arn:aws:iam::${self:provider.account_id}:role/serverless_cloudformation

  # Add additional environment variables if necessary
  environment:
    SERVICE_NAME: ${self:service}
    STAGE: ${self:provider.stage}
    UI_DOMAIN_NAME: ${self:custom.ui_domain_name}
    COGNITO_USER_POOL_USERS_ID:
      Ref: CognitoUserPoolUsers
    COGNITO_USER_POOL_USERS_ARN:
      Fn::GetAtt: [CognitoUserPoolUsers, Arn]
    COGNITO_USER_POOL_CLIENT_USERS_ID:
      Ref: CognitoUserPoolClientUsers

  # IAM role permissions given to the Lambda function.  Update as
  # needed.  More information about IAM permissions can be found here:
  #
  # https://goo.gl/6jZuHu
  # https://goo.gl/EWuaSm
  # https://goo.gl/ki8hXT
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: '*'

    - Effect: Allow
      Action:
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:DescribeUserPool
      Resource: '*'

    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: '*'

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:*:*:table/${self:service}-${self:provider.stage}*

  # How much memory to grant to the Lambda function.  Allocated memory
  # drives compute capabilities.  The lowest value is 128 MB.  Unless
  # large amounts of memory are required, you should work with the
  # lowest value.  If you require more resources consider if you are
  # building your application correctly with efficient code.
  #
  # More information about memory/compute can be found here:
  # https://goo.gl/g8YjqY
  memorySize: 128
  name: aws
  region: ca-central-1
  runtime: python3.7
  stage: ${opt:stage}
  # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  timeout: 6
  # Allow for cf "AWS::" variables
  # See https://goo.gl/atHr7z
  variableSyntax: "\\${(?!AWS::)([ :a-zA-Z0-9._,\\-\\/\\(\\)]+?)}"

package:
  exclude:
    - node_modules/**
    - npm-debug.log
    - package.json
    - package-lock.json
    - requirements.txt
    - venv/**

plugins:
  - serverless-domain-manager
  - serverless-plugin-bind-deployment-id
  - serverless-plugin-scripts
  - serverless-wsgi

custom:
  customDomain:
    domainName: ${self:custom.env.domain_name, self:custom.default_domain_name}
    stage:
      Ref: Stage
  default_deletion_policy: Delete
  default_domain_name: ${self:provider.stage}-api.caringfredericton.com
  ui_domain_name: https://${self:provider.stage}-www.caringfredericton.com
  env: ${file(configs/${self:provider.stage}.yaml)}
  scripts:
    hooks:
      'after:package:finalize': npm run create_domain -- --stage ${self:provider.stage}
      'before:remove:remove': npm run delete_domain -- --stage ${self:provider.stage}
  wsgi:
    app: api.app

functions:
  login:
    name: ${self:service}-${self:provider.stage}-api-login
    handler: handlers/login.handler
    events:
      - http:
          method: POST
          path: /api/login
          cors: true

  registration:
    name: ${self:service}-${self:provider.stage}-registration
    handler: wsgi.handler
    events:
      - http:
          method: POST
          path: /users/register
          cors: true

  activation:
    name: ${self:service}-${self:provider.stage}-activation
    handler: wsgi.handler
    events:
      - http:
          method: POST
          path: /users/activate
          cors: true

  swagger:
    name: ${self:service}-${self:provider.stage}-swagger
    handler: handlers/swagger.handler
    events:
      - http:
          method: GET
          path: /
      - http:
          method: GET
          path: /index.html
      - http:
          method: GET
          path: /swagger.yaml

  api:
    name: ${self:service}-${self:provider.stage}-api
    handler: wsgi_handler.handler
    events:
      - http:
          method: POST
          path: /register-organization
          cors: true
      - http:
          method: any
          path: /guest-view/{proxy+}
          cors: true
      - http:
          method: any
          path: /{proxy+}
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoAuthorizer

resources:
  Resources:
    #===================================================================
    # API Gateway
    #===================================================================
    Stage:
      Type: AWS::ApiGateway::Stage
      Properties:
        DeploymentId:
          Ref: __deployment__

        RestApiId:
          Ref: ApiGatewayRestApi
        StageName: ${self:provider.stage}

    #===================================================================
    # Cognito
    #===================================================================
    CognitoUserPoolUsers:
      Type: AWS::Cognito::UserPool
      DeletionPolicy: ${self:custom.env.deletion_policy, self:custom.default_deletion_policy}
      Properties:
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: True
          InviteMessageTemplate:
            EmailSubject: Your temporary password
            EmailMessage: |
              Your username is {username} and temporary password is {####}.
              Please go to ${self:custom.ui_domain_name}/login to update your password.
        AutoVerifiedAttributes:
          - email
        EmailVerificationMessage: |
          Your verification code is {####}.
        EmailVerificationSubject: |
          Your verification code
        Policies:
          PasswordPolicy:
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: false
            MinimumLength: 8
        UsernameAttributes:
          - email
        UserPoolName: ${self:service}-${self:provider.stage}-users
        UserPoolTags:
            CLIENT: Civic Tech Fredericton
            PROJECT: Caring Calendar

    CognitoUserPoolClientUsers:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: users
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        RefreshTokenValidity: 30
        UserPoolId:
          Ref: CognitoUserPoolUsers

    CognitoAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        IdentitySource: method.request.header.Authorization
        Name: ${self:service}-${self:provider.stage}-users-authorizer
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPoolUsers, Arn]

    #===================================================================
    # DynamoDB
    #===================================================================
    TableUser:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${self:custom.env.deletion_policy, self:custom.default_deletion_policy}
      Properties:
        TableName: ${self:service}-${self:provider.stage}-user
        AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
        KeySchema:
        - AttributeName: id
          KeyType: HASH
        SSESpecification:
          SSEEnabled: True
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
        - IndexName: ${self:service}-${self:provider.stage}-user-email-index
          KeySchema:
          - AttributeName: email
            KeyType: HASH
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - id

    TableOrganizations:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${self:custom.env.deletion_policy, self:custom.default_deletion_policy}
      Properties:
        TableName: ${self:service}-${self:provider.stage}-organization
        AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        KeySchema:
        - AttributeName: id
          KeyType: HASH
        SSESpecification:
          SSEEnabled: True
        BillingMode: PAY_PER_REQUEST

    TableEvents:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${self:custom.env.deletion_policy, self:custom.default_deletion_policy}
      Properties:
        TableName: ${self:service}-${self:provider.stage}-event
        AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: owner
          AttributeType: S
        KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: owner
          KeyType: RANGE
        SSESpecification:
          SSEEnabled: True
        BillingMode: PAY_PER_REQUEST
