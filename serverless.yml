service: caring-fred

provider:
  # The role referenced by cfnRole is created by CloudFormation in
  # advance as; account is used to execute deployments.
  # cfnRole: arn:aws:iam::${self:provider.account_id}:role/serverless_cloudformation

  # How much memory to grant to the Lambda function.  Allocated memory
  # drives compute capabilities.  The lowest value is 128 MB.  Unless
  # large amounts of memory are required, you should work with the
  # lowest value.  If you require more resources consider if you are
  # building your application correctly with efficient code.
  #
  # More information about memory/compute can be found here:
  # https://goo.gl/g8YjqY
  memorySize: 128
  name: aws
  region: ${env:AWS_DEFAULT_REGION, 'ca-central-1'}
  stage: ${opt:stage}
  stackName: ${self:service}-app-${self:provider.stage}
  runtime: python3.8
  lambdaHashingVersion: 20201221
  deploymentBucket:
    name: ${self:service}-${self:provider.stage}-serverlessdeploymentbucket
    serverSideEncryption: AES256

  # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  timeout: 6

  iam:
    role: ExecutionRole

  environment:
    SERVICE_NAME: ${self:service}
    STAGE: ${self:provider.stage}

  # Reference external API Gateway definition
  apiGateway:
    restApiId: ${cf:${self:service}-apig-${self:provider.stage}.ApiGateway}
    restApiRootResourceId: ${cf:${self:service}-apig-${self:provider.stage}.ApiGatewayRootResourceId}

plugins:
  - serverless-prune-plugin
  - serverless-python-requirements
  - serverless-wsgi

custom:
  cognito:
    cognitoAuthorizer: ${cf:${self:service}-users-${self:provider.stage}.UserPoolAuthorizer}

  # TODO: Use the CloudFormation output from the frontend
  default_domain_name: ${ssm:${self:service}-hosted-zone}
  default_ui_domain_name: https://${self:provider.stage}-www.${self:custom.default_domain_name}
  web_domain_name: ${ssm:${self:service}-${self:provider.stage}-ui-domain-name, self:custom.default_ui_domain_name}
  notification_sender: ${ssm:${self:service}-${self:provider.stage}-email-sender, ssm:default-email-sender}
  org_verification_email: ${ssm:${self:service}-${self:provider.stage}-org-verification-email-recipient, ssm:default-org-verification-email-recipient}
  prune:
    automatic: true
    number: 5
  pythonRequirements:
    dockerizePip: non-linux
  wsgi:
    app: app.app

package:
  exclude:
    - ./**
  include:
    - app.py
    - caringapp/**

functions:
#  swagger:
#    name: ${self:service}-${self:provider.stage}-swagger
#    handler: handlers/swagger.handler
#    events:
#      - http:
#          method: GET
#          path: /index.html
#      - http:
#          method: GET
#          path: /swagger.yaml

  app:
    name: ${self:service}-${self:provider.stage}-api
    handler: wsgi_handler.handler
    environment:
      UI_DOMAIN_NAME: ${self:custom.web_domain_name}

      # SES Settings
      NOTIFICATION_SENDER: ${self:custom.notification_sender}
      ORG_VERIFICATION_EMAIL_RECIPIENT: ${self:custom.org_verification_email}
    events:
      - http:
          method: any
          path: /guests/{proxy+}
          cors: true
      - http:
          method: any
          path: /{proxy+}
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              ${self:custom.cognito.cognitoAuthorizer}

resources:
  Resources:
    ExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:provider.stackName}-${self:provider.region}-lambdaRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        # These rights are needed to be able to communicate with resources within the vpc
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: ${self:provider.stage}-${self:service}-app-lambda
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - xray:PutTelemetryRecords
                    - xray:PutTraceSegments
                  Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*:*
                - Effect: Allow
                  Action:
                    - ses:SendEmail
                    - ses:SendRawEmail
                  Resource:
                    - Fn::Join:
                      - ':'
                      - - 'arn:aws:ses'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'identity/*'
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:GetItem
                    - dynamodb:DeleteItem
                    - dynamodb:PutItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:UpdateItem
                  Resource: arn:aws:dynamodb:*:*:table/${self:service}-${self:provider.stage}*

  #===================================================================
  # Stack Outputs
  #===================================================================
  Outputs:
    ServerlessDeploymentBucketName:
      Value:
        Fn::Join:
          - ''
          - - ${self:service}-${self:provider.stage}-serverlessdeploymentbucket
      Export:
        Name: !Sub sls-${self:service}-app-${self:provider.stage}-ServerlessDeploymentBucketName

    ServiceEndpoint:
      Value:
        Fn::Join:
          - ''
          - - ''
      Description: URL of the service endpoint
      Export:
        Name: !Sub sls-${self:service}-app-${self:provider.stage}-ServiceEndpoint