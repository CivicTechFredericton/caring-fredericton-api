service: caring-fred

provider:
  name: aws
  region: ${{env:AWS_DEFAULT_REGION, 'ca-central-1'}}
  stage: ${{opt:stage}}
  # stackName: ${{self:service}}-${{self:provider.stage}}-apig
  stackName: ${{self:service}}-apig-${{self:provider.stage}}
  lambdaHashingVersion: 20201221
  deploymentBucket:
    name: ${{self:service}}-${{self:provider.stage}}-serverlessdeploymentbucket
    serverSideEncryption: AES256

  # Force serverless variables to be double braced - ${{ }} - so as to
  # not interfere with Fn::Sub
  # See https://serverless.com/framework/docs/providers/aws/guide/variables/#using-custom-variable-syntax
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._@\\'\",\\-\\/\\(\\)]+?)}}"

plugins:
  - serverless-deployment-bucket
  - serverless-domain-manager

custom:
  hostedZone: ${{ssm:${{self:service}}-hosted-zone}}
  customDomain:
    domainName: ${{self:provider.stage}}-api.${{self:custom.hostedZone}}
    stage: ${{opt:stage}}
    certificateArn: ${{ssm:${{self:service}}-certificate-arn}}
    createRoute53Record: true
    apiType: rest
    endpointType: 'regional'
    securityPolicy: tls_1_2
    autoDomain: true

resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${{self:service}}-${{self:provider.stage}}

    ApiGatewayMockResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        PathPart: connectivity-test
        RestApiId:
          Ref: ApiGatewayRestApi

    ApiGatewayMockMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: None
        HttpMethod: GET
        ResourceId:
          Ref: ApiGatewayMockResource
        RestApiId:
          Ref: ApiGatewayRestApi
        MethodResponses:
          - ResponseModels:
              text/html: Empty
            StatusCode: 200
        Integration:
          RequestTemplates:
            application/json: |
              {"statusCode": 200}
          Type: MOCK
          IntegrationResponses:
            - ResponseTemplates:
                application/json: "{\"message\": \"OK\"}"
              StatusCode: 200

    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        DeploymentId:
          Ref: ApiGatewayDeployment
        RestApiId:
          Ref: ApiGatewayRestApi
        StageName: ${{self:provider.stage}}

    ApiGatewayDeployment:
      Type: AWS::ApiGateway::Deployment
      DependsOn:
        - ApiGatewayMockMethod
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi

  #===================================================================
  # Stack Outputs
  #===================================================================
  Outputs:
    ApiGateway:
      Value:
        Ref: ApiGatewayRestApi

    ApiGatewayRootResourceId:
      Value:
         Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
