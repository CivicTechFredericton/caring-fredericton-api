service: blue-eyes-api

provider:
  account_id: ${env:AWS_ACCOUNT_ID, self:custom.env.account_id}
  # cfnRole: arn:aws:iam::${self:provider.account_id}:role/serverless_cloudformation
  role: ExecutionRole

  # Add additional environment variables if necessary
  environment:
    SERVICE_NAME: ${self:service}
    STAGE: ${self:provider.stage}

  # How much memory to grant to the Lambda function.  Allocated memory
  # drives compute capabilities.  The lowest value is 128 MB.  Unless
  # large amounts of memory are required, you should work with the
  # lowest value.  If you require more resources consider if you are
  # building your application correctly with efficient code.
  #
  # More information about memory/compute can be found here:
  # https://goo.gl/g8YjqY
  memorySize: 128
  name: aws
  region: us-east-1
  stage: ${opt:stage}
  stackName: ${self:service}-swagger-${self:provider.stage}
  deploymentBucket:
    name: ${self:service}-${self:provider.stage}-serverlessdeploymentbucket

  runtime: python3.7
  # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  timeout: 20
  # Allow for cf "AWS::" variables
  # See https://serverless.com/framework/docs/providers/aws/guide/variables/#using-custom-variable-syntax
  variableSyntax: "\\${((?!AWS)[ ~:a-zA-Z0-9._'\",\\-\\/\\(\\)]+?)}"

  # Reference external API Gateway definition
  apiGateway:
    restApiId: ${cf:${self:service}-apig-${self:provider.stage}.ApiGateway}
    restApiRootResourceId: ${cf:${self:service}-apig-${self:provider.stage}.ApiGatewayRootResourceId}

package:
  exclude:
    - ./**
  include:
    - apidocs/**
    - handlers/swagger.py

custom:
  env: ${file(../../configs/${self:provider.stage}.yaml)}

functions:
  swagger:
    name: ${self:service}-${self:provider.stage}-swagger
    handler: handlers/swagger.handler
    events:
      - http:
          method: GET
          path: /index.html
      - http:
          method: GET
          path: /swagger.yaml
resources:
  Resources:
    ExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:provider.stackName}-${self:provider.region}-lambdaRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ${self:provider.stage}-${self:service}-swagger-lambda
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - xray:PutTelemetryRecords
                    - xray:PutTraceSegments
                  Resource:
                    - Fn::Join:
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
