service: caring-fred

provider:
  account_id: ${env:AWS_ACCOUNT_ID, self:custom.env.account_id}
  # The role referenced by cfnRole is created by IAM CloudFormation in
  # advance via the aws-iam-management repository.
  cfnRole: arn:aws:iam::${self:provider.account_id}:role/serverless_cloudformation
  role: ExecutionRole

  # Add additional environment variables if necessary
  environment:
    SERVICE_NAME: ${self:service}
    STAGE: ${self:provider.stage}
    POI_BUCKET_NAME: ${self:service}-${self:provider.stage}-pois
    POI_S3_PUBLIC_LINK_EXPIRATION: 60

  # How much memory to grant to the Lambda function.  Allocated memory
  # drives compute capabilities.  The lowest value is 128 MB.  Unless
  # large amounts of memory are required, you should work with the
  # lowest value.  If you require more resources consider if you are
  # building your application correctly with efficient code.
  #
  # More information about memory/compute can be found here:
  # https://goo.gl/g8YjqY
  memorySize: 128
  name: aws
  region: ${opt:region, 'ca-central-1'}
  stage: ${opt:stage, 'dev'}
  stackName: ${self:service}-apis-${self:provider.stage}
  deploymentBucket:
    name: ${self:service}-${self:provider.stage}-serverlessdeploymentbucket

  runtime: python3.7
  # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  timeout: 20
  # Allow for cf "AWS::" variables
  # See https://serverless.com/framework/docs/providers/aws/guide/variables/#using-custom-variable-syntax
  variableSyntax: "\\${((?!AWS)[ ~:a-zA-Z0-9._'\",\\-\\/\\(\\)]+?)}"

  # Reference external API Gateway definition
  apiGateway:
    restApiId: ${cf:${self:service}-apig-${self:provider.stage}.ApiGateway}
    restApiRootResourceId: ${cf:${self:service}-apig-${self:provider.stage}.ApiGatewayRootResourceId}

  # Reference external Cognito authorizer ARN definition
  cognito:
    cognitoAuthorizer: ${cf:${self:service}-${self:provider.stage}.UserPoolAuthorizer}

package:
  exclude:
    - ./**
  include:
    - api.py
    - services/**
    - core/**
    - ../configs/${self:provider.stage}.yaml

plugins:
  - serverless-python-requirements
  - serverless-wsgi

custom:
  env: ${file(../configs/${self:provider.stage}.yaml)}
  pythonRequirements:
    fileName: ../requirements.txt
    pythonBin: python

functions:
  api:
    name: ${self:service}-${self:provider.stage}-api
    handler: wsgi_handler.handler
    events:
      - http:
          method: POST
          path: /users/signup
          cors: true
      - http:
          method: any
          path: /guests/{proxy+}
          cors: true
      - http:
          method: any
          path: /{proxy+}
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              ${self:provider.cognito.cognitoAuthorizer}

resources:
  Resources:
    ExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:provider.stackName}-${self:provider.region}-lambdaRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ${self:provider.stage}-${self:service}-apis-lambda
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - xray:PutTelemetryRecords
                    - xray:PutTraceSegments
                  Resource:
                    - Fn::Join:
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - ses:SendEmail
                    - ses:SendRawEmail
                  Resource:
                    - Fn::Join:
                        - ':'
                        - - 'arn:aws:ses'
                          - 'us-east-1' # Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'identity/*'
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:GetItem
                    - dynamodb:DeleteItem
                    - dynamodb:PutItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:UpdateItem
                  Resource: arn:aws:dynamodb:*:*:table/${self:service}-${self:provider.stage}*
